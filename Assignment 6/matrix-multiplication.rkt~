;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname matrix-multiplication) (read-case-sensitive #t) (teachpacks ((lib "convert.rkt" "teachpack" "htdp") (lib "guess.rkt" "teachpack" "htdp") (lib "guess-gui.rkt" "teachpack" "htdp") (lib "gui.rkt" "teachpack" "htdp") (lib "master.rkt" "teachpack" "htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "convert.rkt" "teachpack" "htdp") (lib "guess.rkt" "teachpack" "htdp") (lib "guess-gui.rkt" "teachpack" "htdp") (lib "gui.rkt" "teachpack" "htdp") (lib "master.rkt" "teachpack" "htdp")) #t)))
(define M (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))

(define (M-recursion matrix nat-num n)
  
  (cond [(empty? matrix) empty]
        [(= nat-num n) (first matrix)]
        [else (M-recursion (rest matrix) nat-num (add1 n))]))

(define (matrix-row matrix row)
  
  (M-recursion matrix row 0))

(define (matrix-col-recursion matrix col m)
  (cond [(empty? matrix) empty]
        [(= m col)
         (cons (first (first matrix)) (matrix-col-recursion (rest matrix) col m))]
        [else (matrix-col-recursion (m-list matrix) col (add1 m))]))

(define (matrix-col matrix col)
  
  (matrix-col-recursion matrix col 0))

(define (m-list list)
  
  (cond [(empty? list) empty]
        [else (cons (rest (first list)) (m-list (rest list)))]))

(define (matrix-size matrix1)
  (cond [(empty? matrix1) 0]
        [else (+ 1 (matrix-size (rest matrix1)))]))

(define (dot-product lon1 lon2)
  (cond [(empty? lon1) 0]
        [else (+ (* (first lon1) (first lon2))
                 (dot-product (rest lon1) (rest lon2)))]))

(define (matrix-multiply matrix1 matrix2 m n)
  (cond [(= m (matrix-size matrix1)) empty]
        [(= n (matrix-size (first matrix2)))
         (cons (dot-product(matrix-row matrix1 m) (matrix-col matrix2 n))
                    (matrix-multiply  matrix1 matrix2 (add1 m) (- n  (matrix-size (first matrix2)))))]
        [else (cons (dot-product(matrix-row matrix1 m) (matrix-col matrix2 n))
                    (matrix-multiply  matrix1 matrix2 m (add1 n)))]))


(matrix-multiply M M 1 1)